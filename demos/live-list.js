// Generated by HTMS - CommonJS format
'use strict';

let state = { 'items': [] };
const div2 = document.createElement('div');
div2.setAttribute('id', 'live');
const input1 = document.createElement('input');
input1.setAttribute('id', 'txt');
input1.setAttribute('type', 'text');
input1.setAttribute('placeholder', 'Add item');
div2.appendChild(input1);
const button4 = document.createElement('button');
button4.setAttribute('id', 'add');
button4.textContent = `Add`;
div2.appendChild(button4);
const p4 = document.createElement('p');
const span1 = document.createElement('span');
span1.setAttribute('id', 'cnt');
p4.appendChild(span1);
div2.appendChild(p4);
const ul2 = document.createElement('ul');
ul2.setAttribute('id', 'ul');
div2.appendChild(ul2);
document.body.appendChild(div2);
(function () {
  if (typeof window === 'undefined')
    return;
  if (!window.__htms) {
    Object.defineProperty(window, '__htms', {
      value: {
        watchers: [],
        bind: function (sel, prop, fn) {
          const el = document.querySelector(sel);
          if (!el) {
            console.warn('BIND target not found:', sel);
            return;
          }
          try {
            el[prop] = fn();
          } catch (e) {
            console.error('BIND compute failed:', e);
          }
          this.watchers.push({
            sel,
            prop,
            fn
          });
        },
        notify: function () {
          try {
            this.watchers.forEach(w => {
              const el = document.querySelector(w.sel);
              if (!el)
                return;
              el[w.prop] = w.fn();
            });
          } catch (e) {
            console.error('BIND notify failed:', e);
          }
        }
      },
      writable: false
    });
  }
}());
(function () {
  if (typeof window !== 'undefined' && window.__htms) {
    window.__htms.bind(`#cnt`, `textContent`, function () {
      return String(state.items.length);
    });
  }
}());
try {
  const eventTargets = document.querySelectorAll(`#add`);
  if (eventTargets.length === 0) {
    console.warn('No elements found for event target: #add');
  }
  eventTargets.forEach(element => {
    element.addEventListener('click', function (event) {
      try {
        (function () {
          try {
            state.items.push('document.getElementById(\'txt\').value');
          } catch (error) {
            console.error('PUSH failed:', error);
          }
          if (typeof window !== 'undefined' && window.__htms) {
            window.__htms.notify();
          }
        }());
        (function () {
          try {
            const el = document.querySelector(`#txt`);
            if (!el) {
              console.warn('SETPROP target not found: #txt');
              return;
            }
            el['value'] = '';
          } catch (error) {
            console.error('SETPROP failed:', error);
          }
        }());
        try {
          render();
        } catch (error) {
          console.error('Function call failed: render', error);
        }
      } catch (error) {
        console.error('Event handler error:', error);
      }
    });
  });
} catch (error) {
  console.error('Event setup failed:', error);
}
function render() {
  try {
    (function () {
      try {
        const el = document.querySelector(`#ul`);
        if (!el) {
          console.warn('SETPROP target not found: #ul');
          return;
        }
        el['textContent'] = '';
      } catch (error) {
        console.error('SETPROP failed:', error);
      }
    }());
    const __appendTarget1 = document.querySelector(`#ul`);
    if (!__appendTarget1) {
      console.warn('APPEND target not found: #ul');
    } else {
    }
  } catch (error) {
    console.error('Function render execution error:', error);
  }
}
try {
  render();
} catch (error) {
  console.error('Function call failed: render', error);
}